HashMap
1. 请说出 Java 中散列表、树所对应的容器类。HashMap 如何解决冲突的？
    通过链地址法
    HashMap的数据结构是由一个数组和链表组成的，每个数组元素都是链表的头节点，当插入一个新的key/value对的时候，首先对key进行hash计算获取这个key在数组中的位置，然后查看数组对应位置是否为空，如果为空，则这个key/value对作为数组的元素，即链表的头节点，如果不为空，则将新的key/value对放在链表的最后。
    key的hash值的计算，如果key为null,则hash值为0，否则为key的hashcode的低位与高位进行异或，可以减少随机性。(h=key.hashcode())^(h>>>16),元素在数组中的位置是由key的的hash值与数组长度-1做与运算得到的，所以如果直接用key的hashcode作为hash值，基本上就由低位来决定桶的位置，高位部分全部归0，可能会导致比较多的冲突。所以HashMap会通过对hashcode做位运算来使高位影响低位，减少冲突

    HashMap源码，问 map 源码问题？以及与 LinkedHashMap，TreeMap 不同

    HashMap如何扩容
        当HashMap 中元素数量超过capacity*负载因子时，就需要扩容
        首先计算扩容后哈希桶的长度，即原有的两倍
        定义一个新的哈希桶，遍历旧的哈希桶，对每一个entry,将key的hash值与原来的容量进行与运算(e.hash&oldCap),如果等于0，则保留在原有位置j中，否则就将entry移动到j+cap的位置。
        与原来的容量进行与运算实际上是为了看扩容后新的容量的二进制表示新增的一位中，hash值对应的是1还是0，如果是0，表示不需要移动。

    为什么 JDK8 的扩容比 JDK7 的扩容好？

    LinkedHashMap 和 TreeMap 如何实现有序
    https://www.jianshu.com/p/8f4f58b4b8ab

    LinkedHashMap用双向链表

    ConcurrentHashMap的实现,采用的什么锁？
        在 JDK1.7 的实现中采用的是分段锁，每个段就是一个 Segment，Segment 类是 ConcurrentHashMap 的内部类，继承了 ReentrantLock，每个 Segment 维护一部分的 HashEntry，在进行写入时，就只需要对一个段进行加锁
        JDK1.8 用的是 CAS+Sychronized 的方式，写入时获取的是 Node 节点的锁

    JDK1.7 与 JDK1.8 中 HashMap 实现的区别
        JDK1.7 中 HashMap 是由数组和链表构成，当链表长度越来越长时，查询效率越来越低
        JDK1.8 的优化是当链表长度超过一定的阈值，默认是8，就将链表构造成一棵红黑树

    红黑树为什么可以提高查询效率？

    HashMap 的初始容量为什么设置为16？
        因为HashMap在定位元素在数组中的位置时，是通过hash值和数组长度-1做与运算。所以基本上低位决定了桶的位置。16-1=15，二进制表示是1111，如果1001&1111=1001，1101&1111=1101，即与运算的结果基本上就是hash值的低位。假设我们用20作为数组长度，20-1=19，二进制表示是10011，1001&10011=00001，1101&10011=00001.

    HashMap 保存自定义类是需要重写自定义类的那些方法

    讲一下 HashMap 与 ConcurrentHashMap 的区别
        线程安全和线程不安全

List
    ArrayList 与 LinkedList 区别？
        ArrayList用数组实现链表，查询的效率高，o(1)，插入和删除的最坏情况都是o(n)，并且因为数组大小是固定的，当数组无法容纳更多的元素，需要进行扩容
        LinkedList用链表实现，查询效率低，o(n)，插入和删除的效率都是o(1)

    CopyOnWriteArrayList


