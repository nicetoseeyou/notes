1. 类加载机制以及涉及到的一系列问题
    类加载机制属于懒加载，并不是一开始所有的类都加载完成，而是在需要的时候才会加载

    类加载的时机
        用new实例化某个对象的时候
        通过反射机制获取类的信息时？还是创建类的实例时
        访问类的静态变量和静态方法时，如果子类访问父类的静态变量和方法，只会加载父类
        实例化子类对象时，父类也会被加载
        Main方法所在的类

    类加载的过程
        加载
            将类的二进制流读取到内存

        连接
            验证
                验证class的正确性，包括验证魔数，主次版本号，元数据等等
            准备
                为静态变量(成员变量？)赋零值
            解析
                将符号引用转化成直接引用

        初始化
            执行<clinit>方法
            即初始化静态变量和静态方法
            执行静态代码块和代码块


2. 单例模式会破坏双亲委派模型吗


3. 讲一下双亲委派模型，以及其优点
    类加载器在加载的时候会首先调用其父加载器进行加载
    自定义类加载器会调用系统类加载器，系统类加载器会调用扩展类加载器，扩展类加载器会调用根加载器
    所以java.lang包下的类比如Object类会首先被加载，所以用户自定义的类在加载的时候Object类就已经被加载好了，保证了类加载的顺序
    用户无法任意篡改java的系统类，保证了安全性，我们无法自定义一个java.lang包下的类例如String，并且尝试用系统类加载器或者自定义加载器加载，因为在系统类加载器进行加载的时候，java.lang包下的类早已被加载。如果试图用自定义类加载器加载，也会报SecurityException

