文件系统映像（fsimage）和编辑日志（edits log）

文件系统客户端执行写操作时（创建或者移动文件）这些事务首先被记录到编辑日志中。namenode 在内存中维护文件系统的元数据，当编辑日志被修改时，相关元数据信息也同步更新。
内存中的元数据支持客户端的读请求。

编辑日志在概念上是单个实体，但是它体现为磁盘上的多个文件。每个文件称为一个“段”（segment），名称由前缀 edits 及后缀组成，后缀指示出文件锁包含的事务ID。
任一时刻只有一个文件处于打开可写状态，在事务完成之后，且向客户端发送成功代码之前，文件都需要更新和同步。当 namenode 向多个目录写数据时，只有在所有写操作
更新并同步到每个复本之后才返回成功代码，确保任何事物都不会因为机器故障丢失。

每个 fsimage 文件都是文件系统元数据的一个完整的永久检查点，前缀表示映像文件的最后一个事务。并非每一个写操作都会更新 fsimage 文件，因为 fsimage 是一个大型文件，
频繁的写操作会使系统运行缓慢。这个特性不影响系统的恢复能力，因为如果 namenode 发生故障，最近的 fsimage 文件会被载入内存中用来重构元数据的最近状态，再从相关点开始
向前执行编辑文件日志中的每个事务。namenode 的启动过程就是这样的。

编辑日志会无线增长（即使物理上分布在多个 edits 文件中），由于要恢复编辑日志的每个事务，所以 namenode 重启会变慢。优化方案是运行辅助 namenode，为主 namenode 内存中的
文件系统元数据创建检查点，过程如下

1） 辅助 namenode 请求主 namenode 停止使用正在进行的 edits 文件，将新的编辑操作写入一个新的编辑日志。主 namenode 同时更新所有存储目录中的 seen_txid 文件。
2） 辅助 namenode 从主 namenode 获取最近的 fsimage 和 edits 文件（HTTP GET）
3） 辅助 namenode 将 fsimage 文件装入内存，逐一执行 edits 文件中的事务，创建新的合并后的 fsimage 文件。
4） 辅助 namenode 将新的 fsimage 文件发送回主 namenode （HTTP PUT），主 namenode 将其保存为临时的 .ckpt 文件
5） 主 namenode 重命名临时的 fsimage 文件，供之后使用。

最终，主 namenode 拥有最新的 fsimage 文件和一个更小的正在进行的 edits 文件。当 namenode 处于安全模式，管理员可以通过 hdfs dfsadmin  -saveNamespace 命令创建检查点。

相关参数
dfs.namenode.checkpoint.period 辅助 namenode 相隔多长时间创建检查点，单位是秒，默认一小时
dfs.namenode.checkpoint.txn 事务个数触发
dfs.namenode.checkpoint.check.period 检查频率，单位是秒，默认一分钟